# [<label>] (If applied, this commit will...) <subject> (Max 72 char)
# |<----   Preferably using up to 50 chars   --->|<------------------->|
# Example:
# [feat] Implement automated commit messages
#
# (Optional) Explain why this change is being made
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|
#
# (Optional) Provide links or keys to any relevant tickets, articles or other resources
# Example: Github issue #23
#
# --------------------
# Example Structure:
# <Title>
#
# (Paragraphs describing changes and decisions)
#
# Changelog:
#  - <change>
#  - <change>
#
# <Platform> issue/s #<issue-number>, #<issue-number>
#
# --------------------
# Label can be 
#    feat     (new feature)
#    fix      (bug fix)
#    refactor (refactoring code)
#    style    (formatting, missing semicolons, etc.; no logic or behavioral change)
#    content  (adding or modifying product content, no code change)
#    resc     (adding resources to the project)
#    doc      (changes to documentation)
#    test     (adding or refactoring tests; no production code change)
#    dbg      (changes in debugging code/frameworks; no production code change)
#    ver      (version bump/new release; no production code change)
#    license  (edits regarding licensing; no production code change)
#    hack     (temporary fix to make things move forward; please avoid it)
#    WIP      (work In Progress; for intermediate commits to keep patches reasonably sized)
#    defaults (changes default options)
#
# Note: Multiple labels can be combined, e.g. [fix][style] Fix issue X with methodhandles
# --------------------
# Remember to:
#   * Capitalize the subject line
#   * Use the imperative mood in the subject line
#   * Do not end the subject line with a period
#   * Separate subject from body with a blank line
#   * Use the body to explain what and why vs. how
#   * Can use multiple lines with "-" or "*" for bullet points in body
# --------------------